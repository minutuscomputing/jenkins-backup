<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1254.v3f64639b_11dd">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <org.jenkinsci.plugins.ghprb.GhprbTrigger plugin="ghprb@1.42.2">
          <spec>H/5 * * * *</spec>
          <configVersion>3</configVersion>
          <adminlist></adminlist>
          <allowMembersOfWhitelistedOrgsAsAdmin>false</allowMembersOfWhitelistedOrgsAsAdmin>
          <orgslist></orgslist>
          <cron>H/5 * * * *</cron>
          <buildDescTemplate></buildDescTemplate>
          <onlyTriggerPhrase>false</onlyTriggerPhrase>
          <useGitHubHooks>true</useGitHubHooks>
          <permitAll>false</permitAll>
          <whitelist></whitelist>
          <autoCloseFailedPullRequests>false</autoCloseFailedPullRequests>
          <displayBuildErrorsOnDownstreamBuilds>false</displayBuildErrorsOnDownstreamBuilds>
          <whiteListTargetBranches>
            <org.jenkinsci.plugins.ghprb.GhprbBranch>
              <branch></branch>
            </org.jenkinsci.plugins.ghprb.GhprbBranch>
          </whiteListTargetBranches>
          <blackListTargetBranches>
            <org.jenkinsci.plugins.ghprb.GhprbBranch>
              <branch></branch>
            </org.jenkinsci.plugins.ghprb.GhprbBranch>
          </blackListTargetBranches>
          <gitHubAuthId>7ceaa078-826a-4db8-9583-c09de822192b</gitHubAuthId>
          <triggerPhrase></triggerPhrase>
          <skipBuildPhrase>.*\[skip\W+ci\].*</skipBuildPhrase>
          <blackListCommitAuthor></blackListCommitAuthor>
          <blackListLabels></blackListLabels>
          <whiteListLabels></whiteListLabels>
          <includedRegions></includedRegions>
          <excludedRegions></excludedRegions>
          <extensions>
            <org.jenkinsci.plugins.ghprb.extensions.status.GhprbSimpleStatus>
              <commitStatusContext></commitStatusContext>
              <triggeredStatus></triggeredStatus>
              <startedStatus></startedStatus>
              <statusUrl></statusUrl>
              <addTestResults>false</addTestResults>
            </org.jenkinsci.plugins.ghprb.extensions.status.GhprbSimpleStatus>
          </extensions>
        </org.jenkinsci.plugins.ghprb.GhprbTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3536.vb_8a_6628079d5">
    <script>pipeline {
    agent any

    tools {
        maven &quot;Default&quot;
    }

    stages {
        stage(&apos;Build&apos;) {
	    
	    steps
	    {
	        
                git branch: &apos;Meghana_WS&apos;, url: &apos;https://github.com/MeghanaMahale/DevOpsWorkShopProject-Parent.git&apos;

                
                sh &quot;mvn -Dmaven.test.failure.ignore=true clean package &quot;

             }
             
        }
        
             stage (&apos;CODE ANALYSIS WITH CHECKSTYLE&apos;){
            steps {
                sh &apos;mvn checkstyle:checkstyle&apos;
            }
            post {
                success {
                    echo &apos;Generated Analysis Result&apos;
                }
            }
        }
        stage(&apos;SonarQube analysis&apos;) {
            environment {
             scannerHome = tool &apos;sonarqube-4.7.0&apos;
          }
          
          steps{
              withSonarQubeEnv(&apos;sonarqube-9.7.1&apos;) { 
                sh &quot;${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=demoapp-project \
                   -Dsonar.projectName=demoapp-project \
                   -Dsonar.projectVersion=0.0.1 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/crm/crm/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml&quot;
              }
          }
       }
       
       stage(&apos;Quality Gates&apos;) {
          steps{
           echo &quot;test1&quot;
				sleep time: 30000, unit: &apos;MILLISECONDS&apos;
				echo &quot;test2&quot;
				script {
						echo &quot;Waiting for Quality gate&quot;
						def qualitygate = waitForQualityGate()
                        if (qualitygate.status != &quot;OK&quot;) {
                           error &quot;Pipeline aborted due to quality gate coverage failure: ${qualitygate.status}&quot;
              }
				}
    }
}
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>